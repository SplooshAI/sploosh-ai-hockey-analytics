name: Main Branch Merge

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Dependencies
        run: npm install
          
      - name: Determine Version Bump Type
        id: bump-type
        run: |
          COMMIT_MSG=$(git log --format=%B -n 1)
          echo "Commit message: $COMMIT_MSG"
          
          if [[ $COMMIT_MSG =~ ^feat!: ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ $COMMIT_MSG =~ ^feat: ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Version Bump Branch
        id: create_branch
        run: |
          # Configure git
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # Create new branch
          BRANCH_NAME="version-bump-${{ github.sha }}"
          git checkout -b $BRANCH_NAME
          
          # Store original version
          OLD_VERSION=$(node -p "require('./package.json').version")
          echo "old_version=${OLD_VERSION}" >> $GITHUB_OUTPUT
          
          # Determine new version
          BUMP_TYPE=${{ steps.bump-type.outputs.type }}
          echo "Bump type: $BUMP_TYPE"
          
          # Calculate new version using node
          NEW_VERSION=$(node -e "
            const [major, minor, patch] = '${OLD_VERSION}'.split('.');
            const type = '${BUMP_TYPE}';
            let newVersion;
            if (type === 'major') {
              newVersion = \`\${Number(major) + 1}.0.0\`;
            } else if (type === 'minor') {
              newVersion = \`\${major}.\${Number(minor) + 1}.0\`;
            } else {
              newVersion = \`\${major}.\${minor}.\${Number(patch) + 1}\`;
            }
            console.log(newVersion);
          ")
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          
          # Update root package.json
          jq ".version = \"$NEW_VERSION\"" package.json > temp.json && mv temp.json package.json
          
          # Update app package.json
          cd apps/sploosh-ai-hockey-analytics
          jq ".version = \"$NEW_VERSION\"" package.json > temp.json && mv temp.json package.json
          cd ../..
          
          # Stage and commit changes
          git add package.json apps/sploosh-ai-hockey-analytics/package.json
          git commit -m "chore: bump version from ${OLD_VERSION} to ${NEW_VERSION}"
          
          # Push branch
          git push origin $BRANCH_NAME
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create the PR and capture its number
          PR_NUMBER=$(gh pr create \
            --title "chore: bump version from ${{ steps.create_branch.outputs.old_version }} to ${{ steps.create_branch.outputs.new_version }}" \
            --body "Automated version bump triggered by merge to main.

            Changes:
            - Bump version from ${{ steps.create_branch.outputs.old_version }} to ${{ steps.create_branch.outputs.new_version }}
            - Update version in both package.json files" \
            --base main \
            --head ${{ steps.create_branch.outputs.branch_name }} \
            --json number -q .number)
          
          # Enable auto-merge
          gh pr merge $PR_NUMBER --auto --merge 