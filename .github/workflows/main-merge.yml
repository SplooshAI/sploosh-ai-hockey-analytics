name: Main Branch Merge

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    outputs:
      pr_number: ${{ steps.get_pr.outputs.pr_number }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Debug Identity
        run: |
          echo "Current git config:"
          git config --list
          echo "GitHub Context:"
          echo "Actor: ${{ github.actor }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Event Actor: ${{ github.event.sender.login }}"
          echo "Server URL: ${{ github.server_url }}"
          echo "Repository: ${{ github.repository }}"
          
      # Only run in GitHub Actions environment, not during local testing
      - name: Import GPG key
        if: ${{ !env.ACT }}
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_user_name: "github-actions[bot]"
          git_user_email: "github-actions-bot@users.noreply.github.com"
          
      - name: Display GPG Keys and Export Public Key
        if: ${{ !env.ACT }}
        run: |
          echo "Available GPG Keys:"
          gpg --list-secret-keys --keyid-format LONG
          
          echo -e "\nGPG Public Key for GitHub:"
          gpg --armor --export 90CD8F6F3E5CEBD6
      
      - name: Verify GPG Setup
        if: ${{ !env.ACT }}
        run: |
          echo "After GPG import:"
          git config --list
          gpg --list-secret-keys --keyid-format LONG
      
      # Force the commit to be made as the GitHub Actions bot
      - name: Configure Git for GitHub Actions
        if: ${{ !env.ACT }}
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Dependencies
        run: npm install
          
      - name: Determine Version Bump Type
        id: bump-type
        run: |
          # Get the merge commit message
          COMMIT_MSG=$(git log --format=%B -n 1)
          echo "Full commit message: $COMMIT_MSG"
          
          # Extract the PR title (second line after merge message)
          PR_TITLE=$(echo "$COMMIT_MSG" | sed -n '3p')
          echo "PR title: $PR_TITLE"
          
          # Major version bump for breaking changes
          if [[ $PR_TITLE =~ ^feat!: ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
            echo "Major version bump triggered by breaking change"
          
          # Minor version bump for new features
          elif [[ $PR_TITLE =~ ^feat: ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
            echo "Minor version bump triggered by new feature"
          
          # Patch version bump for all other types
          elif [[ $PR_TITLE =~ ^(fix|docs|style|refactor|perf|test|build|ci|chore|revert): ]]; then
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "Patch version bump triggered by maintenance change"
          
          else
            echo "❌ Invalid PR title format: $PR_TITLE"
            exit 1
          fi
      
      - name: Create Version Bump Branch
        id: create_branch
        run: |
          # Create new branch
          BRANCH_NAME="version-bump-${{ github.sha }}"
          git checkout -b $BRANCH_NAME
          
          # Store original version
          OLD_VERSION=$(node -p "require('./package.json').version")
          echo "old_version=${OLD_VERSION}" >> $GITHUB_OUTPUT
          
          # Determine new version
          BUMP_TYPE=${{ steps.bump-type.outputs.type }}
          echo "Bump type: $BUMP_TYPE"
          
          # Calculate new version using node
          NEW_VERSION=$(node -e "
            const [major, minor, patch] = '${OLD_VERSION}'.split('.');
            const type = '${BUMP_TYPE}';
            let newVersion;
            if (type === 'major') {
              newVersion = \`\${Number(major) + 1}.0.0\`;
            } else if (type === 'minor') {
              newVersion = \`\${major}.\${Number(minor) + 1}.0\`;
            } else {
              newVersion = \`\${major}.\${minor}.\${Number(patch) + 1}\`;
            }
            console.log(newVersion);
          ")
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          
          # Update root package.json
          jq ".version = \"$NEW_VERSION\"" package.json > temp.json && mv temp.json package.json
          
          # Update app package.json
          cd apps/sploosh-ai-hockey-analytics
          jq ".version = \"$NEW_VERSION\"" package.json > temp.json && mv temp.json package.json
          cd ../..
          
          # Stage and commit changes
          git add package.json apps/sploosh-ai-hockey-analytics/package.json
          git commit -m "chore: bump version from ${OLD_VERSION} to ${NEW_VERSION}"
          
          # Force push branch (with lease for safety)
          git push --force-with-lease origin $BRANCH_NAME || git push --force origin $BRANCH_NAME
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT

      - name: Create or Update Pull Request
        id: get_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.create_branch.outputs.branch_name }}"
          
          # Check if PR already exists
          EXISTING_PR=$(gh pr list --head $BRANCH_NAME --json number,url -q '.[0].url')
          
          if [ -n "$EXISTING_PR" ]; then
            echo "Updating existing PR: $EXISTING_PR"
            # Get PR number from URL
            PR_NUMBER=$(echo $EXISTING_PR | grep -o '[0-9]*$')
            # Update the existing PR's branch with our changes
            git push --force-with-lease origin $BRANCH_NAME
          else
            echo "Creating new PR..."
            # Create new PR and get its URL
            PR_URL=$(gh pr create \
              --title "chore: bump version from ${{ steps.create_branch.outputs.old_version }} to ${{ steps.create_branch.outputs.new_version }}" \
              --body "Automated version bump triggered by merge to main.

              Changes:
              - Bump version from ${{ steps.create_branch.outputs.old_version }} to ${{ steps.create_branch.outputs.new_version }}
              - Update version in both package.json files" \
              --base main \
              --head $BRANCH_NAME)
            
            # Extract PR number from URL
            PR_NUMBER=$(echo $PR_URL | grep -o '[0-9]*$')
            echo "Created PR: $PR_URL"
          fi
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

  merge-pr:
    needs: version-bump
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: read
      statuses: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Wait for checks and merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Waiting for checks to complete on PR #${{ needs.version-bump.outputs.pr_number }}"
          
          # Wait for checks to complete (timeout after 10 minutes)
          timeout=600
          while [ $timeout -gt 0 ]; do
            # Get check status using correct fields
            STATUSES=$(gh pr view ${{ needs.version-bump.outputs.pr_number }} --json statusCheckRollup --jq '.statusCheckRollup.[].state')
            echo "Current check statuses:"
            echo "$STATUSES"
            
            # Check if any are still pending
            if echo "$STATUSES" | grep -q "PENDING"; then
              echo "Checks still running... ($timeout seconds remaining)"
              sleep 10
              timeout=$((timeout - 10))
              continue
            fi
            
            # Check if any failed
            if echo "$STATUSES" | grep -q "FAILURE"; then
              echo "Some checks failed!"
              exit 1
            fi
            
            # If we get here, all checks have completed successfully
            echo "All checks passed!"
            
            # Get the branch name before merging
            BRANCH_NAME=$(gh pr view ${{ needs.version-bump.outputs.pr_number }} --json headRefName --jq '.headRefName')
            
            # Merge the PR
            gh pr merge ${{ needs.version-bump.outputs.pr_number }} --merge
            
            # Delete the branch after successful merge
            git push origin --delete $BRANCH_NAME
            echo "Cleaned up branch: $BRANCH_NAME"
            
            exit 0
          done
          
          echo "Timeout waiting for checks!"
          exit 1