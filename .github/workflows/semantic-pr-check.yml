name: Semantic PR Check

on:
  pull_request:
    types: 
      - opened    # New PR
      - edited    # PR title/description edited
      - synchronize # New commits pushed

permissions:
  pull-requests: read
  deployments: read
  statuses: read

jobs:
  check-pr-format:
    runs-on: ubuntu-latest
    steps:
      - name: Check PR Title Format
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Checking PR title: $PR_TITLE"
          
          # Check if title starts with valid type (including breaking change ! for any type)
          if [[ ! "$PR_TITLE" =~ ^(feat!|fix!|docs!|style!|refactor!|perf!|test!|build!|ci!|chore!|revert!|feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert): ]]; then
            echo "❌ PR title must start with one of these types, optionally followed by ! for breaking changes:"
            echo "feat, fix, docs, style, refactor, perf, test, build, ci, chore, revert"
            echo "Example: feat: new feature"
            echo "Example: fix!: breaking bug fix"
            echo "See CONTRIBUTING.md for more details on commit message format."
            exit 1
          fi
          
          echo "✅ PR title format is valid"

      - name: Wait for Vercel Deployment
        run: |
          echo "Waiting for Vercel deployment to complete..."
          
          # Wait for deployment (timeout after 5 minutes)
          timeout=300
          while [ $timeout -gt 0 ]; do
            # Check deployment status using GitHub API
            DEPLOYMENT_STATUS=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/deployments/statuses" | \
              jq -r '.[0].state')
            
            echo "Current deployment status: $DEPLOYMENT_STATUS"
            
            if [ "$DEPLOYMENT_STATUS" = "success" ]; then
              echo "✅ Vercel deployment completed successfully!"
              exit 0
            elif [ "$DEPLOYMENT_STATUS" = "failure" ] || [ "$DEPLOYMENT_STATUS" = "error" ]; then
              echo "❌ Vercel deployment failed!"
              exit 1
            fi
            
            echo "Deployment still in progress... ($timeout seconds remaining)"
            sleep 10
            timeout=$((timeout - 10))
          done
          
          echo "❌ Timeout waiting for deployment!"
          exit 1

      - name: Check Breaking Change Format
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          # Check for breaking change indicator
          if [[ "$PR_TITLE" =~ ^feat!: ]]; then
            echo "⚠️ Breaking change detected in PR title"
            echo "This will trigger a major version bump"
          fi 